I ran two test cases, and they came back with interesting varying results.
The first test I ran was to exhaustively find all possible N=4 boards.
This ran much more quickly on tower than on plain_tower (by a factor
of 165). The test was formatted as follows:
    findall(_, tower(4, _, _), _)
        vs.
    findall(_, plain_tower(4, _, _), _)

The second test I ran was a more normal case - given some C, find a valid board
T. This, however, ran more quickly on plain_tower by a factor of 3 (0.3 speedup).
Note that I only ran this to find one solution, as that would be the general
usecase.

    once(tower(5, _, counts([2,3,4,1,2], [3,2,1,4,2], [2,1,5,2,3], [2,4,1,4,2])))
        vs.
    once(plain_tower(5, _, counts([2,3,4,1,2], [3,2,1,4,2], [2,1,5,2,3],
        [2,4,1,4,2])))

Ambiguous puzzle found:

Input:
    ambiguous(4, counts([3, 2, 1, 2], [2, 1, 2, 3], [3, 2, 1, 2], [2, 1, 2, 3]), A, B).

Output:
    A = [[1,3,4,2],[3,1,2,4],[4,2,1,3],[2,4,3,1]]
    B = [[1,3,4,2],[3,2,1,4],[4,1,2,3],[2,4,3,1]]
